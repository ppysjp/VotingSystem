studyvideo

Instead of a having a code block for every single route for the webapplication that we are 
making, we are going to make use of the MVC architecture. This means that we are going to 
make use of a controlle to manage the routing for us instead.

So to do this we are going to make use of the MapDefaultControllerRoute Method. 

gacp "Make the WebApplication make use of the Controller architecture."

studyvideo

So we are now going to implement the controller. There are a set of conventions that are 
required to make a controller. So to do the next step we are going to create a Controller
folder within the Api project and the we are going to make a class with 'Controller' as 
its suffix that inherits from Controller.

So yeah that's cool we now have a Controller for the HomePage of the Website. 

gacp "Create HomeController"

studyvideo

So the next step is to essentially register the controller within the Startup.cs file 
we do this by using the service object and register the controller through it. 
The controllers are registered by the AddControllers method that belings to the services 
object. This is done within hte ConfgiureServices metod.

gacp "Register Controllers"

studyvideo 

So we are going to now implement the first function of our controller. The way that the route
is managed by the controller is done by the name of the controller so 'Home' in this case
and then the function so Index, so I think the route that is managed by the controller will
be 'Home/Index' for the method that we have just created.
He defines the method to be an 'Action' which makes sense. 

gacp "Create first Action within the Home Controller"

studyvideo

https://localhost:44341/ and https://localhost:44341/Home/Index are mapped to the same 
location by convention.

gacp "We just learned that when running the application /Home/Index is route"

studyvideo

We then add the next action which is About which will return the About page. He then 
demonstrates that https://localhost:44341/About doesn't produce the About page but that
you actually need to post https://localhost:44341/Index/About to retrieve the page. 
This is just to demonstrate that the Home/Index is the convenction that we are used to 
using most.  

studyvideo

He then shows us that we can override the route by using the HttpGet, HttpPost etc 
attributes. A demonstration of this ensues. 

By using this attribute it means that the following page can be retrieved by using the 
following route https://localhost:44341/about-page

gacp "Customizing the route using Http attributes"

studyvideo

So we also learn that we can ensure that the controller is still part of the route so that 
the route looks like this again https://localhost:44341/home/about-page 
This is done by using the route property. And if we want to override the route so that 
the about page is still found at https://localhost:44341/about-page despite using the 
the route, if we put a forward slash '/' at the start of the http get, the about page 
is then placed at the route. 

gacp "Use route property but place about-page at route"




