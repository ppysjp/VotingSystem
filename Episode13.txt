studyvideo

Instead of a having a code block for every single route for the webapplication that we are 
making, we are going to make use of the MVC architecture. This means that we are going to 
make use of a controlle to manage the routing for us instead.

So to do this we are going to make use of the MapDefaultControllerRoute Method. 

gacp "Make the WebApplication make use of the Controller architecture."

studyvideo

So we are now going to implement the controller. There are a set of conventions that are 
required to make a controller. So to do the next step we are going to create a Controller
folder within the Api project and the we are going to make a class with 'Controller' as 
its suffix that inherits from Controller.

So yeah that's cool we now have a Controller for the HomePage of the Website. 

gacp "Create HomeController"

studyvideo

So the next step is to essentially register the controller within the Startup.cs file 
we do this by using the service object and register the controller through it. 
The controllers are registered by the AddControllers method that belings to the services 
object. This is done within hte ConfgiureServices metod.

gacp "Register Controllers"

studyvideo 

So we are going to now implement the first function of our controller. The way that the route
is managed by the controller is done by the name of the controller so 'Home' in this case
and then the function so Index, so I think the route that is managed by the controller will
be 'Home/Index' for the method that we have just created.
He defines the method to be an 'Action' which makes sense. 

gacp "Create first Action within the Home Controller"

studyvideo

https://localhost:44341/ and https://localhost:44341/Home/Index are mapped to the same 
location by convention.

gacp "We just learned that when running the application /Home/Index is route"

studyvideo

We then add the next action which is About which will return the About page. He then 
demonstrates that https://localhost:44341/About doesn't produce the About page but that
you actually need to post https://localhost:44341/Index/About to retrieve the page. 
This is just to demonstrate that the Home/Index is the convenction that we are used to 
using most.  

studyvideo

He then shows us that we can override the route by using the HttpGet, HttpPost etc 
attributes. A demonstration of this ensues. 

By using this attribute it means that the following page can be retrieved by using the 
following route https://localhost:44341/about-page

gacp "Customizing the route using Http attributes"

studyvideo

So we also learn that we can ensure that the controller is still part of the route so that 
the route looks like this again https://localhost:44341/home/about-page 
This is done by using the route property. And if we want to override the route so that 
the about page is still found at https://localhost:44341/about-page despite using the 
the route, if we put a forward slash '/' at the start of the http get, the about page 
is then placed at the route. 

gacp "Use route property but place about-page at route"

studyvideo

We can also put within the string [controller] and [about] and this will give us then
use the default Home/About as the route for the About Page 

gacp "So that is how we organise pages"

studyvideo

So now we are learning about supplying paramaters to pages. The methods that we have 
created so far do not have parameters that are being passed into the functions. However
if we want to pass a parameter to a page we use curly brackets.

So if we place a breakpoint at the return statement of the About function
and then type the following https://localhost:44341/Home/About/hello into the URL whilst 
running the application we then find that the word has the value "hello". 

gacp "Intro to passing parameters into the Controller functions"

He then goes on to explain that you have to be careful when defining the routes for your 
web application, so for more info watch around the 11:00 minute mark.

studyvideo

So now e begin for real we are going to start register the services that we want to use.
We start with the VotingPollFactory by creating a Singleton within the ConfgiureServices
method of the website. So that is the first step. 

So we have just added the reference to the VotingSystem to the VotingSystem.UI and then we 
have ensured that the singleton is of type IVotingPollFactory because this means we will be 
injecting the IVotingPollFactory into the the Controller we are using. 

gacp "Register the IVotingPollFactory with the services of the VotingSystem.UI"

studyvideo

So now we are going to inject the IVotingPollFactory in to the controller that we are going 
to be using. So let's do that. So now we have a filed where we can instantiate and use the 
VotingPollFactory.

So within our controller we also need to be able to instantiate VotingPolls etc so that is 
what we are implementing now.


gacp "Implementing the Home Controller so that it uses the VotingPoll"

studyvideo

So the key thing here to understand is that the MVC structure is Model View Controller.
And in this case the Model is the Voting Poll, that is the thing that is being 'modeled' 
for our system. 

gacp "Short Explaination of MVC"

studyvideo

So we are now going to run the application so that the VotingPoll is created by the Controller
We do this in postman because this application is very good for checking if things are linking
up in the correct way. 

studyvideo

So when you use your controller and you are using postman you need to ensure that the request
you are what you sending is the correct from the dropdown menu on the left. Because I have 
tagged the Create method with HttpPost then in postman I need to use POST on the URL 
https://localhost:44341/Home in this case. We are using postman as the client because we 
don't have a webpage. At the moment we have a VC because the view side of the application that
we are making doesn't have anything in it. 

gacp "Using Postman for the first time to post"

studyvideo

So learning some more about postman, because we are posting I think this would be 
the equivalent of filing in some boxes on a webpage we can create the voting poll 
with some of it's attributes by using postman, specifically we can do this by assigning 
key value pairs where the key is one of the properties within the class. 
So in the case of the voting poll I have used the Title property and assigned it to the word
hello, when I debug this you can see that ti has a value of hello. See 18:40 within the video
for more details. 

studyvideo

He then goes on to explain different ways of doing what he calls the Model Binding which 
is where the Data is assigned to our objects. We can specify how the binding is done, so 
in the example so far we only did it via the key values within postman. However we could 
be more stringent and use properties to specify exactly how the binding should be done. 
So for example we could ensure that it is only done in the Url or what have you. 

The attribute for doing this is [FromQuery] and this attribue goes before the parameter 
that is supplied to the Create Function. 

The reason for specifying this because you only want one way of Model binding. 

gacp "Learning a bit about model binding"

studyvideo

So he basically rounds up this section explaining about the From attribute for model binding 
in C#. 

https://docs.microsoft.com/en-us/aspnet/core/mvc/models/model-binding?view=aspnetcore-6.0

gacp "Learning a bit more about model binding in C#."

studyvideo

We now look at how to post the request by ensuring that whatever is posted has three 
array values as well. So the title and description are the keys for the first two fields
but when it comes to array we need to put brackets on the end of the key like so 
names[0], names[1], so that postman knows it is posting elements within the array.

It's been a while but the Request is actually a class within the VotingPollFactoroy which 
is used to instantiate the VotingPoll. It just means that instead of passing a series of 
parameters to the Create method we can past the class and then that will assign the values 
to the correct fields. If you remember the names array will instantiate a set of counters 
whose name is the list of counters given. 

gacp "Further understanding of model binding"














