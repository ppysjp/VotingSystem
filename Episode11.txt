We begin creating the next class we are goin to use which brings everything together. 
This thing we are going to create is called the StatisticsInteractor.

gacp "Begin Episode11 create StatitcsInteractor class" 

So we are now going to begin by creating our first test. This is going to be like a god test
that will bring together everything in our program into one place. So that is the next 
step. We are going to make use of a voting Poll so we need to find the place wheere we have
used that in a test and bring it to the current test. Code reuse.

gacp "We know that when we display the statistics we are going to make use of a Voting Poll" 

studyvideo

So we are now going to mock the persistance layer as we are going to be using it to 
retrieve the data that is going to be displayed by the interactor. We've also just realised
that the class we initially created's name is wrong so that needs fixing. 

So I'm trying to implement this myself.
We have a counter manager that actually has a GetStatistics function so I wonder if 
I'll be making use of that... I think most likely yes.
The Counter Manager has two methods

GetStatistics: 
	which assigns a Percentage to counter that is supplied and then returns 
	that counter.

ResolveExcess: 
	which tkaes a set of counters and performs some logic to ensure that each of the counters
	supplied that have a percentage that makes sense, so that all the percentages add up to
	some value that actually makes sense.

Looking at the other interactor tests I think it is highly likely that the _mockPersistance
is going to be injected into the new interactor for what ever reason so I'm going to do that.

I suppose what we are trying to do is to save a voting poll to the database using the persistance 
object. And then we want to retrieve that voting poll from the database and get its statitistcs.
Something like that.

studyvideo

so we are wnating to get some statistics back from our test so we are creating a method for
the interactor which is called GetStatistics and we are going to use it to retrieve the 
pollStatistics. We also use a pollId to retrieve the statitics for a specific poll that we 
are after. 

gacp "Setting up first test for retrieving and displaying the statistics"

gacp "Set up first test so that it passes but it doesn't have the functionality what we want"

The reason that this test isn't really doing what we want it to is that it isn't really 
making use of the CounterManager we made way back when which had all the logic for calculating
things like the statistics. Now a Poll has a set of Counters, this is important to remember. 

studyvideo

So we are now going to setup the test so that it makes calls to the CounterManager for which
we have created the tests for earlier. To do this we are going to create counters that 
actually have Counts so we actually have some statistics and we are going to create a 
mock Counter Manager that will make calls to functions that the counter manager uses. 
Cool.

I've had a guess at implementing but I think I have doine it wrong.

studyvideo

So the issue that we have, is that basically the countermanger was created at a time in 
the project when we didn't have such a large system. This means that the functions I discussed
above are kind of righ but need adapting. So the interface is still going to be called the 
ICounterManager but we are going to go for a top down approach and basically wire everything
up from the top down instead of bottom up. This means the methods from the CounterManager will be 
used but we just aren't quite there yet to link them up. 

gacp "so we have decisided on a class called CounterStatistics which is going to be part of the design so we are adapting the first test to cater for this"

studyvideo

12:52

The Percentage is something that we don't want to store in the database, I think it's because
it will constantly be changing based on the votes, I'm not entirely sure why. But anyway 
we have a test that is failing and we are about to resolve it which is what I'm trying to learn
here. 

gacp "Fixing test so that percentages work"

A Voting Poll doesn't have votingpoll statistics. So what we are going to do is create a new 
type which is called pollStatistics.

So now we have the first test that works, I'm not sure if if covers all the bases. But basically
this test is try to Display a poll. To do this it is is using the new statisticsinteractor 
which has a persistance layer, to retrieve data from the database, and a CounterManager, which
for now is just implemented off an interface but we have created it so that it has methods 
that are similarly named.  
Whener the interactor call GetStatistics for a specific pollId, we want a poll to be retrieved from
the database layer and then we want to perfrom an action to that poll so that we can get some 
statistics from it. 
The action we are performing on that poll is the GetStatistics method belonging to the 
CounterManager. What it does is it takes the counters that belong to the poll in question and 
returns a list of counter statistics. The list of statistics is represented as a 
CounterStatistics object. 

gacp "persistance and countermanager are used by interactor.GetStatistics method"

studyvideo

Finally we want to ensure that when the Display Statistics function is called we want to make
sure that the the countermanager calls the resolve excess method as well to ensure that the 
statistics actually produce something that kind of makes sense. So to do that we need to 
verify that this is the case.

gacp "Add to the test that ResolveExcess method is called by the _counterManager"

studyvideo

So we now make the test pass by making sure that the counterManager takes the statistics
and that the ResolveExcess function is called on it. 

gacp "Ensure that the test passes by making the countermanager call resolveexcess"

To summarise we are retrieving a poll, getting the statistics from the counters and then 
resolving the excess and then we are returning the cummulative result.

studyvideo

So now we are actually going to implement and test the new interface that we created.
The first thing we need t odo is make sure that when we call the GetPoll method, the database
layer  of the thing we are making retrieves a voting poll. 

So I've tried myself at this stage to try and set up the test in the way that I think it should look 
but I know this isn't right which is fine. But yeah I know it's almost correct.
 
gacp "Create First Test which makes use of the GetPoll Method that needs implementing." 

studyvideo

So just making further steps to save th poll to the database. And we want to retrieve it 
from the database. 

gacp "Continue setting up GetPoll_RetrievesAPollWithCountersFromDatabase"

studyvideo

So we do some more steps to create the test and we want to Assert some things, and then 
we need to actually implement the GetPoll for the persistance object that we are creating 
so that is what is done next.

gacp "Set up test so that it fails because the GetPoll is not implemented"

So now we need to actually implement the GetPoll function. It needs to have all the tests 
passing that we have put into the original test and we need ensure that when we retrieve a 
poll the counters are also retrieved. This is done by using the Linq include function so that 
is the next thing that we are going to retrieve. 

gacp "Attempted my own implementation which seems to get the tests to pass"

Looks like I'm getting better at C# because I actually managed to implement this! 

studyvideo

studyvideo

So we are not going to store the counters in the database because he says that they are 
basically 'accidental state' however we need to kick this test up a notch by adding some 
Votes to the AppDbContext so that we can retrieve the votes as the Count. I'm not sure what
is meant by accidental state here. 

studyvideo 

So we now want the test to actually check to see that when we add votes to our AppDbContext
that the relevant counter gets a count that increase the correct amount. What we want is 
the first Counter to have a count of 2, and a the second counter to have a count of one 
based on the tests so far. 
We can use some of the code we created earlier for the StatisticsInteractorTestst to 
help us along the way with this. So let's use the tests as boiler plate and adapt them to 
work for what we are trying to test here. 

So we have now creted a test that verifies we get the correct poll.
We then verify that each counter that the poll has has the correct number of counts. 

gacp "We have now created a test that verifies that getpoll retrieves the correct poll, and it's counters have the correct count."

So now I'm going to have a go at implementing this. 
I know the change needs to implemented in the VotingSystemPersistance.cs

I suppose we want the case that when a vote is added to the context it will add 1 to the 
count of it's counter and presumably this is done via it's CounterId???? 
How does the Vote link to everything else then? It links via it's counterId 

So I've used the context to retrieve the votes. I know this isn't probably right 
but it is a step in the right direction. And I know that I want to get a Sum of the votes

I want to sum all of the votes that have an CounterId1. 

I tried and my solution got very complicated. 

studyvideo

So the method I tried was what was causing a mess! I tried to make a second call to the context
to retrieve the Votes and then failed to do the assignment becasue I'm stil getting used to
Linq, like soo...

var votes = _ctx.Votes.ToList();
            var poll = _ctx.VotingPolls.Include(x => x.Counters).FirstOrDefault(x => EF.Property<int>(x, "Id") == pollId);

            var sumCounterId1 = votes.Where(x => x.CounterId == 1).Count();
            var sumCounterId2 = votes.Where(x => x.CounterId == 1).Count();

            return _ctx.VotingPolls
                .Include(x => x.Counters)
                .FirstOrDefault(x => EF.Property<int>(x, "Id") == pollId);

However this didn't relly work even though the sumsVals were what I wanted and I just needed 
to work out how to assign them to the count for each of the counters. 

The approach that he suggests to take is to actually use Entity framework simply. 
And set up a way of wiring the classes of Counter and Vote together. So the point of confusion
here was to spot that the Counter and the Vote were not linked together.

He actually creates a new voting poll using the voting poll from the database.
And he says that a Counter has a List of Votes, and he lets Entity Framework do the job 
of linking the Counter and Votes together. The magic that happens is that with the 
complex Linq Query in GetPoll, Entity Framework will do the job of writing the nice and 
efficient sql query to retrieve the thing from the databasae for us. 

gacp "Almost working query to get the test to pass"

studyvideo

So I think there is also an order to the order in which Linq queries are called so basically
here we have to rejig what has already been created a bit. 

So here the test just needed tidying up because in general it is doing what we want it to 
do.

gacp "Finally we have the test which implements business logic working for the GetPoll"

studyvideo

So the Count which is associated with the Counter is derived from the number of Votes 
in the database. Therefore the Count should not be a field in our database which is 
why it should be ignored. This means we can go to the AppDbContext and make sure that 
that field in particular is not kept. 

gacp "Ensure that the Count for the counter is not a column in the database"

studyvideo

So we are now going to move the various classes that we have created into the correct 
place within our project and correct the namespaces. We are then going to retrofit the 
ICounterManager interface to the CounterManager and basically make steps to get that to 
link up everything in the way that it should. 

gacp "Move all of the new classes into the correct places within the project"

studyvideo

So now we are going to start doing some refactoring where we implement the ICounterManager
interface.

gacp "Reimplement the GetStatistics with the CounterManager"