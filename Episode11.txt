We begin creating the next class we are goin to use which brings everything together. 
This thing we are going to create is called the StatisticsInteractor.

gacp "Begin Episode11 create StatitcsInteractor class" 

So we are now going to begin by creating our first test. This is going to be like a god test
that will bring together everything in our program into one place. So that is the next 
step. We are going to make use of a voting Poll so we need to find the place wheere we have
used that in a test and bring it to the current test. Code reuse.

gacp "We know that when we display the statistics we are going to make use of a Voting Poll" 

studyvideo

So we are now going to mock the persistance layer as we are going to be using it to 
retrieve the data that is going to be displayed by the interactor. We've also just realised
that the class we initially created's name is wrong so that needs fixing. 

So I'm trying to implement this myself.
We have a counter manager that actually has a GetStatistics function so I wonder if 
I'll be making use of that... I think most likely yes.
The Counter Manager has two methods

GetStatistics: 
	which assigns a Percentage to counter that is supplied and then returns 
	that counter.

ResolveExcess: 
	which tkaes a set of counters and performs some logic to ensure that each of the counters
	supplied that have a percentage that makes sense, so that all the percentages add up to
	some value that actually makes sense.

Looking at the other interactor tests I think it is highly likely that the _mockPersistance
is going to be injected into the new interactor for what ever reason so I'm going to do that.

I suppose what we are trying to do is to save a voting poll to the database using the persistance 
object. And then we want to retrieve that voting poll from the database and get its statitistcs.
Something like that.

studyvideo

so we are wnating to get some statistics back from our test so we are creating a method for
the interactor which is called GetStatistics and we are going to use it to retrieve the 
pollStatistics. We also use a pollId to retrieve the statitics for a specific poll that we 
are after. 

gacp "Setting up first test for retrieving and displaying the statistics"

gacp "Set up first test so that it passes but it doesn't have the functionality what we want"

The reason that this test isn't really doing what we want it to is that it isn't really 
making use of the CounterManager we made way back when which had all the logic for calculating
things like the statistics. Now a Poll has a set of Counters, this is important to remember. 

studyvideo

So we are now going to setup the test so that it makes calls to the CounterManager for which
we have created the tests for earlier. To do this we are going to create counters that 
actually have Counts so we actually have some statistics and we are going to create a 
mock Counter Manager that will make calls to functions that the counter manager uses. 
Cool.

I've had a guess at implementing but I think I have doine it wrong.

studyvideo

So the issue that we have, is that basically the countermanger was created at a time in 
the project when we didn't have such a large system. This means that the functions I discussed
above are kind of righ but need adapting. So the interface is still going to be called the 
ICounterManager but we are going to go for a top down approach and basically wire everything
up from the top down instead of bottom up. This means the methods from the CounterManager will be 
used but we just aren't quite there yet to link them up. 

gacp "so we have decisided on a class called CounterStatistics which is going to be part of the design so we are adapting the first test to cater for this"

studyvideo

12:52

The Percentage is something that we don't want to store in the database, I think it's because
it will constantly be changing based on the votes, I'm not entirely sure why. But anyway 
we have a test that is failing and we are about to resolve it which is what I'm trying to learn
here. 

gacp "Fixing test so that percentages work"

A Voting Poll doesn't have votingpoll statistics. So what we are going to do is create a new 
type which is called pollStatistics.

So now we have the first test that works, I'm not sure if if covers all the bases. But basically
this test is try to Display a poll. To do this it is is using the new statisticsinteractor 
which has a persistance layer, to retrieve data from the database, and a CounterManager, which
for now is just implemented off an interface but we have created it so that it has methods 
that are similarly named.  
Whener the interactor call GetStatistics for a specific pollId, we want a poll to be retrieved from
the database layer and then we want to perfrom an action to that poll so that we can get some 
statistics from it. 
The action we are performing on that poll is the GetStatistics method belonging to the 
CounterManager. What it does is it takes the counters that belong to the poll in question and 
returns a list of counter statistics. The list of statistics is represented as a 
CounterStatistics object. 

gacp "persistance and countermanager are used by interactor.GetStatistics method"

studyvideo

Finally we want to ensure that when the Display Statistics function is called we want to make
sure that the the countermanager calls the resolve excess method as well to ensure that the 
statistics actually produce something that kind of makes sense. So to do that we need to 
verify that this is the case.

gacp "Add to the test that ResolveExcess method is called by the _counterManager"

