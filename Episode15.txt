studyvideo

So we begin adding some more services that our VotingSystem.UI is going to use.

gacp "Begin Episode 15, partially add new services to the VotingSystemUI startup"

studyvideo

We are using AddScoped. Add scoped is the lifetime of the service, a singleton is created
once and then is the same every time it is called. A description of the different services 
is given if you search Stack Overflow for the following: 

AddTransient, AddScoped and AddSingleton Services Differences

- Singleton which creates a single instance throughout the application. 
		It creates the instance for the first time and reuses the same object in the all calls.

- Scoped lifetime services are created once per request within the scope. 
		It is equivalent to a singleton in the current scope. For example, 
		in MVC it creates one instance for each HTTP request, 
		but it uses the same instance in the other calls within the same web request.

- Transient lifetime services are created each time they are requested. 
		This lifetime works best for lightweight, stateless services.

When to use:

Transient
---------

since they are created every time they will use more memory & Resources and can have the negative impact on performance
use this for the lightweight service with little or no state.

Scoped
------

better option when you want to maintain state within a request.

Singleton
---------

memory leaks in these services will build up over time.
also memory efficient as they are created once reused everywhere.

KudenVenkat has an excellent video on this

gacp "Studying Transient, Scoped and Singleton"

studyvideo

We need to move the IVotingSystemPersistance out of the Application section of our
project and move it into the VotingSystem itself. This helps maintain the modularity
of our system, but will mean that we need to inject the Interface into the Application
at some point. So we have now said that the VotingSystemDatabase is dependant on the
the VotingSystem project which has now caused the project references to have errors.

gacp "Move the IvotingSystemPersitance to the VotingSystem project"

studyvideo


gacp "Rearrange references so that scoped services work"

gacp "Let's now just clean up the the startup.cs"

studyvideo

We also need to register the service that is the AppDbContext. This will be injected
into the VotingSystemPersistance as the VotingSystemPersistance is depedendent upon 
this. 

gacp "Register the AppDbContext"

studyvideo

We need to specify where we are gonig to store the data, this time round we will use 
the in memory database again for now but it would normally be at this stage that you 
use an SQL provider. You can see how this is implemented in the DbContextFactory. 
However for the UI we can call the function that will mkae use of the InMemoryDatabase. 
He then explains the functional paradigm of C#.

10:10 Let's see if we can undertand this at another stage.

gacp "Register the InMemory database"

The next step is to inject the votingPollInteractor into the Index.cshtml.cs file. 

gacp "Register the VotingPollInteractor"

studyvideo

For this application because it is small we are going to tightly couple the database 
with the Database. This is just a shortcut and shouldn't be done normally. 
If we want to do things properly we should use the persistence layer that we have
created and go down the formal road. But for now this will do.
This technically has broken our architecture.
If we are just displaying straight from the database one thing then this is a fine 
thing to do because this is a small application. 

gacp "Tightly couple the UI OnGet to the AppDbContext"

studyvideo

So now we are going to create the VotingPollViewModel class so that we can display 
the voting poll from the database. 
And we also implement how the context is going to take the data from each of the 
VotingPolls that are in the database and create a VotingPollVM from each of them.

gacp "Create a set of VotingPollVMs from the VotingPolls that are in the database"

studyvieo

Ok so we need to add the VotingPolls as a property wihtin the IndexModel so that 
they are accessable from the razorpage. So that is the next step
We then go into the razor page and use a c# block to create a forloop that will 
display each of the voting polls. 

gacp "Create a set of VotingPollVms that are accessible by the razor page"

17:11

studyvideo

We begin by creating a new page that is going to make use of the Interactors that we have made
earlier on in the project.  

gacp "We have now created a Poll razor page that will retrieve statistics when an id is supplied"

studyvideo

So we add the Statistics as a property to the Poll razor page. we then use it to retrieve some
data about said Poll. We also need to add the StatisticsInteractor as a service that is scoped 
to our system.

gacp "Statistics Property is added to razor page and StatisticsInteractor is added as service"

studyvideo

So there was an error to do with fact that we hadn't implemented the ICounterManager Service.

gacp "Implement ICounterManager service."

studyvideo

Here we are getting some tutorial on how to use the Locals section when debugging. 
Ok so the OnGet function is calling twice when we post. 
So we put a break point in the OnPost as well. 
Some really good advice that this guy has given is that you should follow what the 
Request is doing when you perform a debug. 

gacp "Turns out that upon posting we needed an IActionResult that would return a page"

So now we are ready to access the Poll page that we have created. 
When we click on the page we encounter an exception wihtin the CounterManager. 
So we need to fix this by adding another condition to the sweet of tests that we have. 
So we add in some code to ensure that this condition is taken into account.

gacp "End of episode 14"
