We are going to use TDD to create the database.
Classic first step is to get a test that will get your foot throught the
door.
So we are going to create a simple test that saves to the database to 
get our foot through the door. We know from episode 7 that we are going
to be using an AppDbContext to do stuff with our database so the first
step is probably to create that. 
The point is at this point you have done the planning because you have
the domain knowledge to get stuff done.
We take the package references that we have got froom our SandboxEfCore
to instantiate the context that we want to use.

We then create a transactional scope which is done by doing a using 
statement. We want our database to have a set of counters so we know 
that we need to add a counter to the AppDbContext object so we do this
by adding the property. From our domain knowledge we know that the type
that the Counters property is going to be is going to be the following:

DbSet<counter>

So yeah. we create that.

We then create a new counter can check against.
In one using statement we save it to the database and in the other we 
retrieve it.
We then create a savedCounter instance which is the counter object that 
is retrieved from the database. We then assert that the old an new counters
are the same.

When I try and run the test it tells me that I need to override the 
OnConfiguring method. So we need to set it up to use the 
InMemoryDatabase.

However for this project is that we need to provide options through the 
constructor for the AppDbContext. This is a design choice. We want 
to provide a separate name for the database through the constructor
so that each database has a separate name. We want this because the tests
run in parallel and if they happen to use the same database by accident 
then we will get faulty test results.

You may need to revise a bit about how base key word works so here is 
a link here: 

https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/base#:~:text=base%20(C%23%20Reference)&text=The%20base%20keyword%20is%20used,instances%20of%20the%20derived%20class.

We then construct the options that we are going to pass into the context
by using a DbContextOptionsBuilder. So we have now passed the options 
into the AppDbContext object, so yeah we are now making some progress.


So we are now getting a primary key error so the next step is to fix 
this error. We need to ask ourselves whether the dataobject we are dealing
with actually needs a primary key specifically defined.

We use our domain knowledge in this case and override hthe OnModelCreating
function. So we have added the Counter table in the domain knowledge.

Finally we have the first test passing.

So yeah that's pretyy good.

I think we are now going to look at what happens when we have multiple 
counters being saved to a database.

acp "Demonstration of what can happen when you have 2 databases with the same name"

If you don't give different names to the databases, the state will be shared
for the ctx across both tests and this cause your tests to fail.


acp "Begin creating foot in the door test for the voting poll."

acp "Create failing test for saving a voting poll to the database."

So basically at this stage we have copied the test for counters and 
then rewired it up so that it works for the voting poll. That is all 
that we did here.

acp "Test now passes for voting poll"

15:25

The issue with what we have created right now is that the tests created 
basically test Entity Framework and they aren't really testing what we
want to test so we need to change this.

So basically what I just learned is not to much during this block.

I just learned that the name of the class should be renamed because 
what we are testing is basically the AppDbContext.

gacp "Rename test class to AppDbContextTests"

So basically there is some repeated code that we want to refactor.
To do this we are going to create a new function that is called 
CreateDbContext.

gacp "Create function that will be used for refactoring."

So basically we have just started to fill out the body of the function
by copying and pasting the parts that we think we are going to need on 
repeat.

gacp "Added some of the body to the function"

So what we just did was then use the function we have just created and 
started to  replace it in the places where it is being used.

gacp "Refactored places where ApDbContext is created."

We now do the the same thing but for the second test.

gacp "So we have now refactored the second test to use the new function."

focus

So basically the VotingPollInteractor is dependent upon the IVotingPoll
SystemPersistance. So what we need to do is implement the interface 
correctly which is what we are going to attempt to do next.

18:58

gacp "18:58"


So to do this we create a set of tests within the Database.tests
which is called votingsystempersitancetest.cs file. 
All we need to do is use th interface on an object.

gacp "Create persitance test class"

We are creating the first test for this class. 
The test is called SavesVotingPollToDatabase()
And we are going to implement the interface as the first step.

gacp "Began first test and createed classs that implements IVotingSystemPersistance"
 
So We can see that the thing we need to implement here is SaveVotiingPoll.
This means that we are going to need a voitng poll to save to the database.
Now deep in your memory you should remember that a voting poll 
has a set of counters.

gacp "Added Voting poll to my first test"

So we are going to start implementing the SaveVotiingPoll function but 
he takes a left turn and creates an infastructure folder for the database
so that he can then create a factory for the AppDbContext.

gacp "Just started creating the DbcontextFactory" 
gacp "Save Episode9.txt " 

So the Function that we make in the DbFactory is called Create rather 
than CreateAppDbContext and the reason for this is because the fact that
we are using a factory basically gives the game away as to what we are
trying to do.

gacp "Implemented a factory for the creation of ApDbContexts."

So we are now going to start using some of the stuff we created for the
AppDbContextTests. We take the using statement we have already created 
but this time we are going to modify it from what we already have.
We need to change the body of the using block so that it makes use of the
persistance, which is the thing we are actually trying to test!
To do this we actually need to inject the context into the 
VotingSystemPersistance. That means we will also need to introduce a 
constructor so that we can then use the ctx in our SaveVotingPoll method.
So now we implement that.

gacp "Inject ctx into VotingSystemPersistance"

So we are now going to perform a set of asserts that ensure that the 
poll and the saved poll are the same. We also learn how to retrieve 
the saved poll by using the ctx a second time in a second ctx statement
which ehave done before.

There are 4 asserts that we introduce: 

These first 2 are self explainitory, These are first level checks: 

Assert.Equal(poll.Title, savedPoll.Title); 
Assert.Equal(poll.Description, savedPoll.Description);

These second 2 are second level checks because basically the Counters are 
retrieved as a biproduct of being part of the voting poll.

Assert.Equal(poll.Counters.Count(), savedPoll.Counters.Count());

There is also a loop that ensure the names of the Counters match up and 
this is checked via a loop. 

The linq query with Include is the same as doing the following query in 
sql 

SELECT *
FROM Customers JOIN Orders ON Customers.Id = Orders.CustomerId;

if the most basic query would be 

SELECT * FROM Customers;

gacp "Create first test for VotingSystemPersistanceTests"

28:15

The test breaks because we have not implemented the SaveVotingPoll method
We now finally implement the method so that it actually saves stuff. 





















