studyvideo

In this episode we are going to look at Views and then  Razor pages.
Basically he opens by creating a Index.cshtml page. The 'cs' within the html page stands for 
C Sharp html.	He puts this within the VotingSystemUI project under it's own folder which is 
called views. 

gacp "Create first cshtml page which is the index page"

studyvideo

So now we are creating the first HttpGet request which will retrieve the Index page we have 
created. Even though you may place the index page in the correct place you need to set its
BuildAction property to 'Content' other wise when you make the request for the page it will
not be found.  

gacp "Making index page work"

studyvideo

He then tried to implement the next HttpGet request for the about page, but he makes the 
View method return the Index page. However he runs into an error when doing this when he
tries to get the page when running the website. When we type this URL in 
https://localhost:44341/home we get the folowing error which says that the request 
mached multiple endpoints.

gacp "Multiple endpoints error"

studyvideo

So he then goes on to explain one method for fixing this multiple endponts error. This is to 
add to the route attribute [action]. This will then allow the client to know which HttpGet
to call when the Home website is called. This has the unintended consequence of extending 
the URL however so the new URLS with this change would be 

https://localhost:44341/home/Index

or

https://localhost:44341/home/About

The problem with this is that it has the unintended consequence of meaning that the HttpPost
will only be called with the following URL 

https://localhost:44341/home/Create

which is not what we want.

gacp "Fix Multiple endpoints by adding actions to the route path"

studyvideo

So he the demonstrates how you can pass a object to the View() method, he clicks on F12
to demonstrate this. The object that is being passed is basically a model. 
Additional chagnes will be required in the cshtml so that the object is evaluated correctly. 

gacp "How to pass a model into the View() method part1"

studyvideo

He then explains how you would access the Info model from the cshtml page. Basically within
the cshtml file you have to use the @model tag and then you have to dig down into the class
to find the model type. This then gives you the power to use the model type within the 
cshtml file.

gacp "how to access the model within the cshtml file"

studyvideo

So now we then retrieve the message from the Info @modle object that we have created 
within the cshtml. We run the website with the following URL: 

 https://localhost:44341/Home/Index

gacp "retrieve the message from the info Model object within the cshtml file"

studyvideo

It's at this point that we stop using Views because this guy has the opinion that Razor 
pages shoud be used for Website and Controller etc should be used for restful api's. 

gacp "Begin learning about razorpages"

11:00

studyvideo

So it's at this point that we create the first razor page, he puts the page within the 
pages folder of the VotingSystem.UI. He also tells us of the useful keybinding which is 
Ctrl-Shift-A which basically give us the power to add an item to the folder.

gacp "Added First Razor page to the project"

studyvideo

So instead of using a controller, because we are using the Razor page it comes with its own
cs file which in this case is the Index.cshtml.cs file. And so basically this file acts as 
the controller. We can make the OnGet method have a return type of IAction result for 
example.

gacp "Playing around with the cs file of the Razor page and adding the first header to it"

studyvideo

So it is at this point that we need to be able to retrieve the razor page when we run the 
website with the following URL. https://localhost:44341/index

In order to get this to work we need to specify the endpoints again within the Startup.cs 
file, so in this case we need the endpoints.MapRazorPages(); function to be instantiated.
When using the controller we had a centralised place which would retrieve all of the pages 
from the Home controller. In a way by using this new end ponit within hte middleware we are
decentralising where how the pages are being retrieved, since each razor page has its own
controller in a way which is the cshtml page. 

We also now retrieve the razorpage with just the route url now: https://localhost:44341/ 

gacp "set endpoints to map razor pages"

studyvideo

He just done a quick explaination of how the routing works for razor pages and is about to 
do a little experiment. The routing for razorpages is done by folder structure which is why 
he has added a Home folder to hte Pages folder. By doing this he has set up 2 routes which 
point to different things. One route which has the same path goes via the Home controller 
whilst the goes via the Razor page, and what we want to see is what happens! 

gacp "Using 2 routes that are the same for both the home controller and for the razor page"

studyvideo

He basically explains how the routing works further with the razorpages.

https://localhost:44341/home/index -> Returns the HomeController page.

whilst the 

https://localhost:44341/home/ -> Returns the Razor page. 

The key take away from this is that the Index page is by default the route page for razor 
pages, by route I mean you do not need to put anything else after home to retrieve it. 

So the key take away here is that when you have controllers and razor pages the rotues will
end up dancing around each other so you will need to be carefull. 

gacp "Razor and Controller routes can become tangled so be careful"

studyvideo

So we have jsut removed all of the stuff that we were using to explain Views and we are now 
transitioning to using just the controller for the back end stuff and razor pages for the 
front end stuff. 

gacp "Tidy Up project in order to study razor pages"

studyvideo

So in a simliar vain to how we added an info model to the view we are going to add an Id 
to our razor page. This is done by adding the property to the IndexModel class and the 
referencing it within the cshtml file. 

gacp "So we have now just passed a value to the Razor page"

studyvideo

By default the value of the id is 0 but we can set it from the URL with the following 
pattern: 

https://localhost:44341/?id=2

studyvideo

So if we want to change how the parameter is passed to the Model so that we can assign the 
number, instead of passing a query string like above, we need to change how the @page 
route works within the file. This means that we can use a URL that doesn't use a query 
string but instead looks like: 

https://localhost:44341/2

And this will assign the number 2 to the value 2 in the page. 

gacp "Use the URL without query string to set the Id value of the model"

studyvideo

You can define an optional parameter using the question mark after its definition within the razor page.


https://localhost:44341/?id=2

and

https://localhost:44341/2

both work.

gacp "Optional parameter pass into a razor page"

studyvideo

So now we are going to make use of the VotingPoll factory within the controller. We perform dependency injection
via the attribute [fromservice] within the method OnGet() which is a 'Handler' for our razorpage.This means we don't
have to perform dependency injection.  

gacp "When the Index page is retrieved the Voting poll is also retrieved"





