So we are going to do a deep dive into our votingpoll interactor. 
We are going to upgrade the application so that it records a vote, there is going to be a 
set of logic which dicates how and whether a vote is going to be recorded to the database 
so most of the changes will be made to the VotingPollInteractor.

gacp "First commit for Episode10"

So we are now going to start with the simplest step which is just to get a Vote saving to the 
database. To do this we are going to add a class to VotingSystem.Application.Tests which 
will have a class which will test the VotingInteractor.

gacp "Created first test for saving a vote to the database"

So it's important to pont out that the votinginteractor is not the same thing as the 
votingpollinteractor. 
The second thing is we know that we are going to need to use the persistance layer to 
do the testing so we use the mock persistance layer that we use in the VotingPollInteractorTests.cs
here as well.

Cool.

The other thing we have done is alse create 2 new classes. The first class we have created 
is the Vote class and the next class we have created is called the VotingInteractor.

gacp "Create Vote and VotingInteractor objects"

So we have now started to make further in roads into the test we are creating. We want to
make sure that when the interactor calls Vote function it will then cause the persistance 
layer to make a call to the SaveVote function. So that is what we are implementing next.

We have partially implemented the fact that the  persistance layer being called when the 
interactor calls Vote but we have compilation errors still that need to be fixed.

gacp "Ensure interactor calls persistance SaveVote when Vote is called"

studyvideo

Ok so the Vote class is actually part of the Model so we need to move the class to the Model
folder and then change the namespace etc where it is found. We are doing this so that 
we can get rid of the compilation errros we are facing at the moment.

gacp "Fixing Compilation errors that occurs when we move the Vote class which belongs to the Model"

studyvideo

So we now do the next task of making the test pass and then we begin adding more complex 
logic surround when a vote can be persisted and when it can't. This is done by beginning the 
next test, so let's now do that. 

gacp "Get test to pass and then begin next test which adds complexity to persisting a vote"

studyvideo

So we are now wanting to ensure that someone who has voted in the past can't already have 
voted. This means that the Vote class will now need to properties like UserId and CounterId.
We want to use our _mockPersistance to bascially retrieve for us from the database any users
or counterIds that are already there... something like that. 

This is where we setup the persistance so that it will retrieve something from the database.

studyvideo

So we now create a function for the interface which is a boolean called VoteExists, and we 
use the mockobject to ensure that it returns true. and then we also ensure that when this is 
ran the Verify function checks that the SaveVote of the Persistance layer is not called ever.

gacp "We have now got a failing test for which we need to implement the logic so that SaveVote is never called."

We then get the tests to pass with some simple logic and then we begin to refactor as we normally 
would if we were doing TDD. 


gacp "Tests are all now passing so we begin to refactor"

studyvideo

So we introduce a constructor that then allows us to tidy up all of the tests that have been
written, we also we rename the first test to specify that a vote will be persisted when 
a user hasn't voted.

gacp "Refactor step has now been completed"objects

studyvideo

So by implenting the tests that we have just created it naturally leads us to try and the implement
the interface methods for our actual persistance layer. So the next job is to create a test 
that will test whether a vote has actually been saved using our appdbcontext. 

gacp "Setup the ground work for testing the new functions that I want to test"

studyvideo

Ok so we are now going to set up the test but htis time for vote, this time we are going to
instnatiate the "real" persistance and then we are going to perform SaveVote and we are going
to then from there save it using the persistnace and then we will be doing some sort of 
assertions...

gacp "Partially implemented Persists Vote test"

studyvideo 

So we are now going to set up the tests to assure us tha the vote that is saved to the database
is the same as the vote that is retrieved from the database. 

Ok so we now have our failing test because the AppDbContext does not implement the SaveVote
method from our IVotingSystemPersistance Interface. So we need to fix that as well.

gacp "Created Failing tests for PersistsVote"

studyvideo

So I think I am a bit lost but I'm trying to implement the test and am not being the most 
successful. haha. I need to keep on trying. So the error I am getting is that the method 
SaveVVote has not been implemented so I'm just going to fix that now. 

gacp "Have implemented the method so that all tests are now passing"

studyvideo

So we now want to create a test for the other method that is going to be implemented by the 
interface which is vote exists. We need to copy the previous test we created but we 
will only need one using statement as we are not going to be saving anything to the database,
but we are goin to check that when we call the VoteExists method when using our persistance
layer that it does in fact return False when the database in question is empty.

gacp "Created failing test for VoteExists method of the persistance layer"

gacp "Here we opt for the easiest and simplest solution to getting the test to pass." 

So we now create another test that will fail, initially and this is because we are testing
that the Vote does in fact exist when we save something to our appdbcontext.







